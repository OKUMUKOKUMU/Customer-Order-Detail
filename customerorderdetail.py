# -*- coding: utf-8 -*-
"""CustomerOrderDetail.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GVaZtbV4Ld2MRESb0i4SkVCJBsyJck1n
"""

import streamlit as st
import pandas as pd
import numpy as np
import re
import io
import base64
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go

# Page configuration
st.set_page_config(
    page_title="Excel Data Processor",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #4CAF50, #45a049);
        padding: 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #4CAF50;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .success-message {
        background: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #c3e6cb;
        margin: 1rem 0;
    }
    .error-message {
        background: #f8d7da;
        color: #721c24;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #f5c6cb;
        margin: 1rem 0;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        padding: 0px 24px;
        background-color: #f0f2f6;
        border-radius: 8px 8px 0px 0px;
    }
    .stTabs [aria-selected="true"] {
        background-color: #4CAF50;
        color: white;
    }
</style>
""", unsafe_allow_html=True)

def clean_data(df):
    """Clean and transform the data from the uploaded Excel file."""
    try:
        cleaned_df = df.copy()

        # Forward fill the customer name and item type
        cleaned_df['Customer_Name'] = cleaned_df['Type'].where(cleaned_df['Type'] != 'Item')
        cleaned_df['Type'] = cleaned_df['Type'].where(cleaned_df['Type'] == 'Item')
        cleaned_df['Customer_Name'] = cleaned_df['Customer_Name'].ffill()

        # Regex pattern for date in 'Shipment Date' column
        date_pattern = r'\d{2}-\d{2}-\d{2}'

        # Separate Customer ID and Shipment Date
        cleaned_df['CID'] = cleaned_df['Shipment Date'].where(~cleaned_df['Shipment Date'].str.contains(date_pattern, na=False))
        cleaned_df['Shipment_Date'] = cleaned_df['Shipment Date'].where(cleaned_df['Shipment Date'].str.contains(date_pattern, na=False))

        # Forward fill CID and Shipment Date
        cleaned_df['CID'] = cleaned_df['CID'].ffill()
        cleaned_df['Shipment_Date'] = pd.to_datetime(cleaned_df['Shipment_Date'].ffill(), errors='coerce')

        # Extract Order_No and Order_Date from Description
        order_pattern = r"(\d{5,})\s+(\d{1,2}/\d{1,2}/\d{4})"
        cleaned_df[['Order_No', 'Order_Date']] = cleaned_df['Description'].str.extract(order_pattern)
        cleaned_df['Order_No'] = cleaned_df['Order_No'].ffill()
        cleaned_df['Order_Date'] = pd.to_datetime(cleaned_df['Order_Date'].ffill(), errors='coerce')

        # Remove extracted information from Description
        cleaned_df['Description'] = cleaned_df['Description'].str.replace(order_pattern, '', regex=True).str.strip()

        # Remove rows with 'Order No.' in No.
        cleaned_df = cleaned_df[~cleaned_df['No.'].str.contains('Order No.', na=False)]

        # Forward fill No.
        cleaned_df['No.'] = cleaned_df['No.'].ffill()

        # Drop rows without Description
        final_df = cleaned_df.dropna(subset=['Description'], how='all')

        # Remove empty description rows
        final_df = final_df[final_df['Description'].str.strip() != '']

        # Define columns for the final output
        columns = [
            'CID', 'Shipment_Date', 'Customer_Name', 'Type', 'No.',
            'Order_No', 'Order_Date', 'Description', 'Quantity', 'OutstandingQuantity',
            'Quantity on Back Order', 'Unit Price Excl. VAT',
            'Line Discount Amount', 'Inv. Discount Amount Excl. VAT', 'OutstandingOrders'
        ]

        available_columns = [col for col in columns if col in final_df.columns]
        final_df = final_df[available_columns]

        return final_df, None
    
    except Exception as e:
        return None, str(e)

def get_download_link(df, filename):
    """Generate a download link for a DataFrame as Excel file."""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Data')
        
        # Add some formatting
        workbook = writer.book
        worksheet = writer.sheets['Data']
        
        # Format headers
        header_format = workbook.add_format({
            'bold': True,
            'bg_color': '#4CAF50',
            'font_color': 'white',
            'border': 1
        })
        
        for col_num, value in enumerate(df.columns.values):
            worksheet.write(0, col_num, value, header_format)

    b64 = base64.b64encode(output.getvalue()).decode()
    href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="{filename}" style="text-decoration: none; background-color: #4CAF50; color: white; padding: 10px 20px; border-radius: 5px; display: inline-block; margin: 5px;">üì• Download {filename}</a>'
    return href

def create_summary_chart(deli_df, foc_df):
    """Create a summary chart comparing Deli and FOC data."""
    summary_data = {
        'Category': ['Deli', 'FOC'],
        'Records': [len(deli_df), len(foc_df)],
        'Total_Quantity': [
            deli_df['Quantity'].sum() if 'Quantity' in deli_df.columns and not deli_df.empty else 0,
            foc_df['Quantity'].sum() if 'Quantity' in foc_df.columns and not foc_df.empty else 0
        ]
    }
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        name='Records',
        x=summary_data['Category'],
        y=summary_data['Records'],
        yaxis='y',
        offsetgroup=1,
        marker_color='#4CAF50'
    ))
    
    fig.add_trace(go.Bar(
        name='Total Quantity',
        x=summary_data['Category'],
        y=summary_data['Total_Quantity'],
        yaxis='y2',
        offsetgroup=2,
        marker_color='#FF9800'
    ))
    
    fig.update_layout(
        title='Data Summary: Deli vs FOC',
        xaxis=dict(title='Category'),
        yaxis=dict(title='Number of Records', side='left'),
        yaxis2=dict(title='Total Quantity', side='right', overlaying='y'),
        barmode='group',
        height=400
    )
    
    return fig

def display_data_quality_metrics(df):
    """Display data quality metrics."""
    if df.empty:
        return
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Records", len(df))
    
    with col2:
        missing_data = df.isnull().sum().sum()
        st.metric("Missing Values", missing_data)
    
    with col3:
        complete_rows = len(df.dropna())
        st.metric("Complete Rows", complete_rows)
    
    with col4:
        completion_rate = (complete_rows / len(df) * 100) if len(df) > 0 else 0
        st.metric("Completion Rate", f"{completion_rate:.1f}%")

def main():
    # Header
    st.markdown("""
    <div class="main-header">
        <h1 style="color: white; margin: 0;">üìä Excel Data Processor</h1>
        <p style="color: white; margin: 0; opacity: 0.9;">Clean and transform your order data with advanced analytics</p>
    </div>
    """, unsafe_allow_html=True)

    # Sidebar
    with st.sidebar:
        st.header("üìã Processing Options")
        
        # File processing options
        st.subheader("Data Processing")
        show_raw_data = st.checkbox("Show Raw Data Preview", value=True)
        max_preview_rows = st.slider("Preview Rows", 5, 50, 10)
        
        st.subheader("Output Options")
        include_charts = st.checkbox("Include Summary Charts", value=True)
        include_quality_metrics = st.checkbox("Show Data Quality Metrics", value=True)
        
        st.subheader("Download Options")
        timestamp_format = st.selectbox(
            "Timestamp Format",
            ["YYYYMMDD_HHMMSS", "YYYY-MM-DD", "MMDDYYYY"]
        )

    # Instructions
    with st.expander("üìñ Instructions", expanded=True):
        st.markdown("""
        ### How to use this application:
        1. **Upload your Excel file** containing order data using the file uploader below
        2. **Review the raw data** to ensure it loaded correctly
        3. **Check the processed data** in the Deli and FOC tabs
        4. **Download the cleaned files** for further use
        
        ### Expected Excel format:
        - **Type column**: Contains customer names and 'Item' indicators
        - **Shipment Date column**: Contains customer IDs and shipment dates
        - **Description column**: Contains order numbers and dates
        - **No. column**: Contains item numbers
        """)

    # File uploader
    st.subheader("üìÅ File Upload")
    uploaded_file = st.file_uploader(
        "Choose your Excel file",
        type=["xlsx", "xls"],
        help="Upload an Excel file containing your order data"
    )

    if uploaded_file is not None:
        try:
            # Show file info
            file_details = {
                "Filename": uploaded_file.name,
                "File size": f"{uploaded_file.size:,} bytes",
                "File type": uploaded_file.type
            }
            
            with st.expander("üìÑ File Information"):
                for key, value in file_details.items():
                    st.write(f"**{key}**: {value}")

            # Processing indicator
            with st.spinner('üîÑ Processing your data...'):
                # Read the Excel file
                df = pd.read_excel(uploaded_file)
                
                # Show raw data if requested
                if show_raw_data:
                    st.subheader("üìã Raw Data Preview")
                    st.dataframe(df.head(max_preview_rows), use_container_width=True)
                    
                    if include_quality_metrics:
                        st.subheader("üìä Raw Data Quality")
                        display_data_quality_metrics(df)

                # Clean the data
                cleaned_df, error = clean_data(df)
                
                if error:
                    st.markdown(f'<div class="error-message">‚ùå <strong>Error processing data:</strong> {error}</div>', unsafe_allow_html=True)
                    st.info("Please check your Excel file format and try again.")
                    return

                # Split the cleaned data based on Customer_Name
                spp_deli_df = cleaned_df[cleaned_df['Customer_Name'].str.endswith('Deli', na=False)] if not cleaned_df.empty else pd.DataFrame()
                spp_foc_df = cleaned_df[~cleaned_df['Customer_Name'].str.endswith('Deli', na=False)] if not cleaned_df.empty else pd.DataFrame()

                # Generate timestamps for filenames
                now = datetime.now()
                if timestamp_format == "YYYY-MM-DD":
                    timestamp = now.strftime("%Y-%m-%d")
                elif timestamp_format == "MMDDYYYY":
                    timestamp = now.strftime("%m%d%Y")
                else:
                    timestamp = now.strftime("%Y%m%d_%H%M%S")
                
                deli_filename = f"SPP_Deli_{timestamp}.xlsx"
                foc_filename = f"SPP_FOC_{timestamp}.xlsx"

                # Success message
                st.markdown(f'''
                <div class="success-message">
                    ‚úÖ <strong>Processing Complete!</strong><br>
                    Found <strong>{len(spp_deli_df)}</strong> Deli records and <strong>{len(spp_foc_df)}</strong> FOC records.
                </div>
                ''', unsafe_allow_html=True)

                # Summary chart
                if include_charts and (not spp_deli_df.empty or not spp_foc_df.empty):
                    st.subheader("üìà Data Summary")
                    chart = create_summary_chart(spp_deli_df, spp_foc_df)
                    st.plotly_chart(chart, use_container_width=True)

                # Create tabs for the datasets
                tab1, tab2, tab3 = st.tabs(["ü•™ Deli Data", "üçΩÔ∏è FOC Data", "üìä Analytics"])

                with tab1:
                    st.subheader("Deli Data Analysis")
                    
                    if not spp_deli_df.empty:
                        # Metrics
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.metric("üìù Total Records", len(spp_deli_df))
                        with col2:
                            if 'Quantity' in spp_deli_df.columns:
                                total_qty = spp_deli_df['Quantity'].sum()
                                st.metric("üì¶ Total Quantity", f"{total_qty:,.0f}")
                        with col3:
                            unique_customers = spp_deli_df['Customer_Name'].nunique()
                            st.metric("üë• Unique Customers", unique_customers)
                        with col4:
                            if 'Unit Price Excl. VAT' in spp_deli_df.columns:
                                avg_price = spp_deli_df['Unit Price Excl. VAT'].mean()
                                st.metric("üí∞ Avg Unit Price", f"${avg_price:.2f}")

                        # Download button
                        st.markdown("### üì• Download")
                        st.markdown(get_download_link(spp_deli_df, deli_filename), unsafe_allow_html=True)
                        
                        # Data preview
                        st.markdown("### üëÄ Data Preview")
                        st.dataframe(spp_deli_df.head(max_preview_rows), use_container_width=True)
                        
                        if include_quality_metrics:
                            st.subheader("üìä Data Quality Metrics")
                            display_data_quality_metrics(spp_deli_df)
                    else:
                        st.info("No Deli data found in the processed file.")

                with tab2:
                    st.subheader("FOC Data Analysis")
                    
                    if not spp_foc_df.empty:
                        # Metrics
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.metric("üìù Total Records", len(spp_foc_df))
                        with col2:
                            if 'Quantity' in spp_foc_df.columns:
                                total_qty = spp_foc_df['Quantity'].sum()
                                st.metric("üì¶ Total Quantity", f"{total_qty:,.0f}")
                        with col3:
                            unique_customers = spp_foc_df['Customer_Name'].nunique()
                            st.metric("üë• Unique Customers", unique_customers)
                        with col4:
                            if 'Unit Price Excl. VAT' in spp_foc_df.columns:
                                avg_price = spp_foc_df['Unit Price Excl. VAT'].mean()
                                st.metric("üí∞ Avg Unit Price", f"${avg_price:.2f}")

                        # Download button
                        st.markdown("### üì• Download")
                        st.markdown(get_download_link(spp_foc_df, foc_filename), unsafe_allow_html=True)
                        
                        # Data preview
                        st.markdown("### üëÄ Data Preview")
                        st.dataframe(spp_foc_df.head(max_preview_rows), use_container_width=True)
                        
                        if include_quality_metrics:
                            st.subheader("üìä Data Quality Metrics")
                            display_data_quality_metrics(spp_foc_df)
                    else:
                        st.info("No FOC data found in the processed file.")

                with tab3:
                    st.subheader("üìä Advanced Analytics")
                    
                    if not cleaned_df.empty:
                        # Customer distribution
                        if 'Customer_Name' in cleaned_df.columns:
                            st.markdown("#### Customer Distribution")
                            customer_counts = cleaned_df['Customer_Name'].value_counts().head(10)
                            fig_customers = px.bar(
                                x=customer_counts.index,
                                y=customer_counts.values,
                                title="Top 10 Customers by Record Count",
                                labels={'x': 'Customer', 'y': 'Number of Records'}
                            )
                            fig_customers.update_layout(xaxis_tickangle=-45)
                            st.plotly_chart(fig_customers, use_container_width=True)
                        
                        # Date analysis
                        if 'Order_Date' in cleaned_df.columns:
                            st.markdown("#### Order Date Analysis")
                            date_df = cleaned_df[cleaned_df['Order_Date'].notna()].copy()
                            if not date_df.empty:
                                date_df['Order_Month'] = date_df['Order_Date'].dt.to_period('M')
                                monthly_orders = date_df.groupby('Order_Month').size()
                                
                                fig_dates = px.line(
                                    x=monthly_orders.index.astype(str),
                                    y=monthly_orders.values,
                                    title="Orders by Month",
                                    labels={'x': 'Month', 'y': 'Number of Orders'}
                                )
                                st.plotly_chart(fig_dates, use_container_width=True)
                        
                        # Data completeness heatmap
                        st.markdown("#### Data Completeness")
                        completeness = (1 - cleaned_df.isnull().mean()) * 100
                        fig_completeness = px.bar(
                            x=completeness.values,
                            y=completeness.index,
                            orientation='h',
                            title="Data Completeness by Column (%)",
                            labels={'x': 'Completeness (%)', 'y': 'Column'}
                        )
                        st.plotly_chart(fig_completeness, use_container_width=True)
                    else:
                        st.info("No data available for analytics.")

        except Exception as e:
            st.markdown(f'<div class="error-message">‚ùå <strong>Error processing file:</strong> {str(e)}</div>', unsafe_allow_html=True)
            st.info("Please make sure your Excel file has the expected format with the required columns.")
            
            # Show debug information
            with st.expander("üîç Debug Information"):
                st.write("Error details:", str(e))
                try:
                    df_info = pd.read_excel(uploaded_file)
                    st.write("File columns:", list(df_info.columns))
                    st.write("File shape:", df_info.shape)
                except:
                    st.write("Could not read file for debugging")

    # Footer with app information
    st.markdown("---")
    with st.expander("‚ÑπÔ∏è About this Application"):
        st.markdown("""
        ### Excel Data Processor v2.0
        
        This enhanced application helps you clean and process Excel data files for order management with advanced features:

        **‚ú® New Features:**
        - Interactive charts and analytics
        - Data quality metrics
        - Advanced filtering options
        - Enhanced error handling
        - Customizable output formats
        - Real-time processing indicators

        **üîß Core Features:**
        - Extracts customer information, order numbers, and dates
        - Cleans and formats the data automatically
        - Separates records into Deli and FOC categories
        - Provides downloadable Excel files with formatting
        - Shows comprehensive data analytics

        **üí° Tips:**
        - Use the sidebar to customize processing options
        - Check data quality metrics to ensure clean data
        - Download files include proper Excel formatting
        - Use the analytics tab for insights into your data

        **üìß Support:** fordraneokumu74@gmail.com
        
        **üêõ Found a bug?** Please report it with details about your Excel file format.
        """)
        
        # System information
        st.markdown("#### System Information")
        st.code(f"""
        Streamlit version: {st.__version__}
        Pandas version: {pd.__version__}
        Timestamp: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
        """)

if __name__ == "__main__":
    main()
